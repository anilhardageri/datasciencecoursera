?system.time
?writeSDML
?getmonitor
??getmonitor
View(D)
?iris
data(iris)
library(datasets)
data(iris)
?iris
?iris
data(iris)
??iris
?iris
dataframe(iris)
data(iris)
data(iris)
iris
testdata
testdata
view(testdata)
str(testdata)
R
r
view(R)
d
d
view("testdata")
View("testdata")
View(testdata)
View(R)
View(d)
View(x)
testdata <- read.csv("C:/Users/anil/Desktop/spring semsester/supply chain management/testdata.csv")
View(testdata)
View(testdata)
rowsum(spend,format(Date,'%Y-%m-%d'))
x <- data.frame(testdata)
str(x)
x
head(x)
rowsum(spend,format(Date,'%Y-%m-%d'))
rowsum(d$spend,format(Date,'%Y-%m-%d'))
rowsum(x$spend,format(Date,'%Y-%m-%d'))
rowsum(x$spend,format(x$date,'%Y-%m-%d'))
tapply(x$spend,format(x$date,'%Y-%m-%d'))
library(data.table)
getwd()
dir()
clear()
install.packages("HistData")
library(HistData)
dir()
ls()
load(histdata)
load(HistData)
b <- read.csv("http://data.gov.uk/dataset/index-of-multiple-deprivation")
b
str(test)
str(b)
b <- read.csv("http://data.gov.uk/dataset/index-of-multiple-deprivation#")
str(b)
install.packages("RCurl")
webq <- readLines("http://www.ncbi.nlm.nih.gov/gds/?term=diabetes")
head(webq)
grep("diabetes",webq)
webq[grep("diabetes",webq)]
date()
install.packages("twitteR")
library(twitteR)
ls()
dir()
packages()
packages
.packages()
.Library
b <- .packages()
b
x <- 0:2
plot(x,dbinom(x,2,0.7),type = "h",col = "red",lwd = 10,main = "probability that X patients are cured")
plot(x,dbinom(x,2,0.7),type = "h",col = "red",lwd = 8,main = "probability that X patients are cured")
plot(x,dbinom(x,2,0.7),type = "h",col = "red",lwd = 100,main = "probability that X patients are cured")
plot(x,dbinom(x,2,0.7),type = "h",col = "red",lwd = 1,main = "probability that X patients are cured")
plot(x,dbinom(2,x,0.7),type = "h",col = "red",lwd = 10,main = "probability that X patients are cured")
rnorm(90,10)
?dnorm
x <- seq(-4,4,0.01)
plot(x,dnorm(x,type = "l")
Z
plot(x,dnorm(x),type = "l")
bt <- seq(60,120,1)
bt
?dnorm
plot(bt,dnorm(bt,90,10),type = "l",xlim = "blood pressure")
?plot
plot(bt,dnorm(bt,90,10),type = "l",xlab = "blood pressure")
?abline
abline(v=72)
?cord
?cord.x
b <- c(108,seq(108,120,1),120)
b
b <- seq(108,120,1)
b
?text
x <- seq(-4,4,0.05)
plot(dnorm(x))
?curve
curve(dnorm(x),from = -4,to = 4)
plot(dnorm(x),type = "l")
pnorm(90,10,100)
pnorm(100,90,10)
pnorm(180,90,10)
pnorm(190,90,10)
?segments
runif(10)
x <- stats::runif(12); y <- stats::rnorm(12)
i <- order(x, y); x <- x[i]; y <- y[i]
plot(x, y, main = "arrows(.) and segments(.)")
## draw arrows from point to point :
s <- seq(length(x)-1)  # one shorter than data
arrows(x[s], y[s], x[s+1], y[s+1], col= 1:3)
s <- s[-length(s)]
segments(x[s], y[s], x[s+2], y[s+2], col= 'pink')
x <-  stats::runif(12)
x
x <- runif(12)
x
?order
?arrows
segments(x[s], y[s], x[s+2], y[s+2], col= 'pink')
curve(dnorm(x, 90, 10), from= 60, to=120)
segments(qnorm(c(0.025, 0.975), 90, 10), 0, qnorm(c(0.025, 0.975), 90, 10),
dnorm(qnorm(c(0.025, 0.975), 90, 10), 90, 10))
dnorm(1)
pnorm(90,10)
ttest.forexamination <- function(x,y,z,k)
subjects <- x
subjects <- x
mean1 <- y
mean2 <- z
mean2 <- z
mean2 <- z
mean2 <- Z
ttest.forexamination <- function(x,y,z,k)
subjects <- x
ttest.forexamination <- function(x,y,z,k){}
ttest.forexamination <- function(x,y,z,k){
subjects <- x
mean1 <- y
mean2 <- z
standarddev <- k
print(c("number of measurements:",x))
print(c("mean of group1",y))
print(c("mean of group2",z))
print(c("standard deviation:",k))
group1 <- round(rnorm(x,y,k))
group2 <- round(rnorm(x,z,k))
framedata <- cbind(c(group1,group2))
print(framedata)
print(list(t.test(group1,group2,var.equal = T),t.test(group1,group2,var.equal = F)))
}
ttest.for.examination(13,90,105,10)
ttest.forexamination(13,90,105,10)
body <-
read.table("http://www.amstat.org/publications/jse/datasets/body.dat.txt")
body
head(body)
str(body)
dim(body)
?names
names(body)
BodyMeasurements <- c("Biacromial_diameter","Biiliac_diameter",
"Bitrochanteric_diameter", "Chest_depth","Chest_diameter",
"Elbow_diameter","Wrist_diameter", "Knee_diameter","Ankle_diameter",
"Shoulder_girth","Chest_girth", "Waist_girth","Navel_girth",
"Hip_girth","Thigh_girth", "Bicep_girth","Forearm_girth",
"Knee_girth","Calf_max_girth", "Ankle_min_girth","Wrist_min_girth",
"Age","Weight","Height","Gender")
names(body) <-BodyMeasurements
names(body)
body$Gender
body$Gender <- as.factor(body$Gender)
body$Gender
body$Gender <- as.character(body$Gender)
body$Gender
table(body$Gender)
summary(body$Gender)
dim(body[body$Gender==0,])
dim(body[body$Gender==1,])
shoulder_girth
library("shoulder_girth")
hist(body$Shoulder_girth)
x <- 0:2
plot(x,dbinom(x,2,0.5),type = "h",col = "blue".lwd = 4,ylim = c(0,0.6))
plot(x,dbinom(x,2,0.5),type = "h",col = "blue",lwd = 4,ylim = c(0,0.6))
curve(dnorm(x,1,0.8),add = T)
?curve
plot(x,dbinom(x,8,0.5),type = "h",col = "blue",led = 4,ylim =c(0,0.6))
plot(x,dbinom(x,8,0.5),type = "h",col = "blue",lwd = 4,ylim =c(0,0.6))
warnings()
curve(dnorm(x,4,1.5),add = T)
?skewed
set.seed(400)
normal <- rnorm(10000)
uniform <-runif(10000)
skewed <- rep(1:140,1:140)
?par()
opar <- par()
par(mfrow = c(3,1))
?mfrow
par()
hist(normal)
hist(NORMAL)
normal<-rnorm(10000)
hist(normal)
par <- (mfrow = c(3,1))
hist(normal)
hist(uniform)
par(opar)
hist(uniform)
par(mfrow = c(3,1))
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl,mean(sample(normal,3,replace = T)))
mean (sample)
mean (sampl)
sd(sampl)
hist(sampl)
hist(sampl,xlim = c(-2,2))
par(opar)
hist(sampl,xlim = c(-2,2))
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( k <- x + y )
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
?system.time()
?proctime
?proc.time
?proctime
?system.time()
?proc.time
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( z <- x + y )
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( x <- x + y )
colnames <- c(paste("A",1:12,sep=""),paste("B",1:12,sep=""))
colnames
mean(1:10)
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
m
apply(m,1,mean)
?apply
x2 <- c(4:1,2:5)
x2
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
apply(x, 2, mean)
apply(x, 1, mean)
?by
e <- new.env()
e
new.env()
?apply
?apply
?trim
?mean
?which()
ME <- matrix(rnorm(24000),nrow=1000)
length(which(ME<=0))
length(which(ME>=0))
state
x <- 1:4
y <- 2
x + y
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- c(1,3, 5) and y <- c(3, 2, 10)
x <- c(1,3, 5) y <- c(3, 2, 10)
x <- c(1,3, 5), y <- c(3, 2, 10)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x,y)
x[x %in% 1:5] <- 0
x <- 7
x
x[x %in% 1:5] <- 0
x[x < 6] <- 0
x
x[x < 6] <- 0
x
x <- c(4, TRUE)
class(x)
x <- c(4, TRUE)
class(x)
x <- 4
class(x)
class(X)
x <- 4i
class(X)
class(x)
s = "Brevity is the soul of wit."
nchar(s)
sprintf("%s has %d dollars", "Sam", 100)
substr("Mary has a little lamb.", start=3, stop=12)
sub("little", "big", "Mary has a little lamb.")
a = factor("A")
class(a)
x = factor(1)
y = factor(2)
x + y
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
allFiles <- list.files(path = directory, full.names = TRUE)
selectedData <- data.frame()
for (i in id) {
selectedData <- rbind(selectedData, read.csv(allFiles[i]))
}
if (pollutant == 'sulfate') {
mean(selectedData$sulfate, na.rm = TRUE)
} else if (pollutant == 'nitrate') {
mean(selectedData$nitrate, na.rm = TRUE)
}
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
allFiles <- list.files(path = directory, full.names = TRUE)
selectedData <- data.frame()
completeCases <- data.frame()
nobs <- data.frame();
for (i in id) {
selectedData <- (read.csv(allFiles[i],header=TRUE))
nobs <- sum(complete.cases(selectedData))
completeCases <- rbind(completeCases, data.frame(i,nobs))
}
completeCases
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
source("complete.R")
completeCases <- complete(directory)
casesAboveThreshold <- completeCases[completeCases$nobs > threshold,1]
allFiles <- list.files(path = directory, full.names = TRUE)
correlations <- rep(NA,length(casesAboveThreshold))
for (i in casesAboveThreshold) {
fileData <- (read.csv(allFiles[i]))
completeCases <- complete.cases(fileData)
validSulfateData <- fileData[completeCases, 2]
validNitrateData <- fileData[completeCases, 3]
correlations[i] <- cor(x = validSulfateData, y = validNitrateData)
#print(head(fileData[completeCases,]))
#print(validSulfateData)
#print(validNitrateData)
}
correlations <- correlations[complete.cases(correlations)]
}
pollutantmean("specdata", "sulfate", 1:10)
cwd
getdir()
getwd()
setwd(C:/Users/anil/Desktop/specdata)
setwd(C:\Users\anil\Desktop\specdata)
setwd("C:/Users/anil/Desktop/specdata")
pollutantmean("specdata", "sulfate", 1:10)
setwd("C:/Users/anil/Desktop/datasciencecoursera")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
use <- sample(332,10)
use
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
clear()
cls()
clear
pollutantmean("specdata", "nitrate")
cr <- corr("specdata")
corr <- function(directory) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
source("complete.R")
completeCases <- complete(directory)
casesAboveThreshold <- completeCases[completeCases$nobs > threshold,1]
allFiles <- list.files(path = directory, full.names = TRUE)
correlations <- rep(NA,length(casesAboveThreshold))
for (i in casesAboveThreshold) {
fileData <- (read.csv(allFiles[i]))
completeCases <- complete.cases(fileData)
validSulfateData <- fileData[completeCases, 2]
validNitrateData <- fileData[completeCases, 3]
correlations[i] <- cor(x = validSulfateData, y = validNitrateData)
#print(head(fileData[completeCases,]))
#print(validSulfateData)
#print(validNitrateData)
}
correlations <- correlations[complete.cases(correlations)]
}
cr <- corr("specdata")
cr <- corr(specdata)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
files <- list.files( path = directory )
cr <- c()
for(f in 1:length(files)){
data <- read.csv( paste(directory, "/", files[f], sep="") )
data <- data[complete.cases(data),]
if ( nrow(data) > threshold ) {
cr <- c(cr, cor(data$sulfate, data$nitrate) ) # append corralations
}
}
return( cr )
}
cr <- corr(specdata)
cr <- corr("specdata")
cr
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
